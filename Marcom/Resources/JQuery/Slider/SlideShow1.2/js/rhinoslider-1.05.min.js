(function (e, t, n) { e.extend(e.easing, { def: "out", out: function (e, t, n, r, i) { return -r * (t /= i) * (t - 2) + n }, kick: function (e, t, n, r, i) { if ((t /= i / 2) < 1) { return r / 2 * Math.pow(2, 10 * (t - 1)) + n } return r / 2 * (-Math.pow(2, -10 * --t) + 2) + n }, shuffle: function (e, t, n, r, i) { if ((t /= i / 2) < 1) { return r / 2 * t * t * t * t * t + n } return r / 2 * ((t -= 2) * t * t * t * t + 2) + n } }); var r = function (t, r) { var i = e.extend({}, e.fn.rhinoslider.defaults, r), s = e(t), o = e.fn.rhinoslider.effects, u = e.fn.rhinoslider.preparations, a = { isPlaying: false, intervalAutoPlay: false, active: "", next: "", container: "", items: "", buttons: [], prefix: "rhino-", playedArray: [], playedCounter: 0, original: t }; i.callBeforeInit(); var f = function (e) { e.controlsPrevNext = String(e.controlsPrevNext) == "true" ? true : false; e.controlsKeyboard = String(e.controlsKeyboard) == "true" ? true : false; e.controlsMousewheel = String(e.controlsMousewheel) == "true" ? true : false; e.controlsPlayPause = String(e.controlsPlayPause) == "true" ? true : false; e.pauseOnHover = String(e.pauseOnHover) == "true" ? true : false; e.animateActive = String(e.animateActive) == "true" ? true : false; e.autoPlay = String(e.autoPlay) == "true" ? true : false; e.cycled = String(e.cycled) == "true" ? true : false; e.showTime = parseInt(e.showTime, 10); e.effectTime = parseInt(e.effectTime, 10); e.controlFadeTime = parseInt(e.controlFadeTime, 10); e.captionsFadeTime = parseInt(e.captionsFadeTime, 10); tmpShiftValue = e.shiftValue; tmpParts = e.parts; e.shiftValue = []; e.parts = []; return e }, l = function (t, r, i) { r = f(r); t.wrap('<div class="' + i.prefix + 'container">'); i.container = t.parent("." + i.prefix + "container"); i.isPlaying = r.autoPlay; var s = ""; if (r.controlsPrevNext) { i.container.addClass(i.prefix + "controls-prev-next"); s = '<a class="' + i.prefix + "prev " + i.prefix + 'btn">' + r.prevText + '</a><a class="' + i.prefix + "next " + i.prefix + 'btn">' + r.nextText + "</a>"; i.container.append(s); i.buttons.prev = i.container.find("." + i.prefix + "prev"); i.buttons.next = i.container.find("." + i.prefix + "next"); i.buttons.prev.click(function () { v(t, r); if (r.autoPlay) { } }); i.buttons.next.click(function () { m(t, r); if (r.autoPlay) { } }) } if (r.controlsPlayPause) { i.container.addClass(i.prefix + "controls-play-pause"); s = r.autoPlay ? '<a class="' + i.prefix + "toggle " + i.prefix + "pause " + i.prefix + 'btn">' + r.pauseText + "</a>" : '<a class="' + i.prefix + "toggle " + i.prefix + "play " + i.prefix + 'btn">' + r.playText + "</a>"; i.container.append(s); i.buttons.play = i.container.find("." + i.prefix + "toggle"); i.buttons.play.click(function () { if (i.isPlaying === false) { d() } else { p() } }) } i.container.find("." + i.prefix + "btn").css({ position: "absolute", display: "block", cursor: "pointer" }); if (r.showControls !== "always") { var o = i.container.find("." + i.prefix + "btn"); o.stop(true, true).fadeOut(0); if (r.showControls === "hover") { i.container.mouseenter(function () { o.stop(true, true).fadeIn(r.controlFadeTime) }).mouseleave(function () { o.delay(200).fadeOut(r.controlFadeTime) }) } } if (r.showControls !== "never") { i.container.addClass(i.prefix + "show-controls") } i.items = t.children(); i.items.addClass(i.prefix + "item"); i.items.first().addClass(i.prefix + "active"); var a = r.styles.split(","), l; e.each(a, function (n, r) { l = e.trim(r); i.container.css(l, t.css(l)); t.css(l, " "); switch (l) { case "width": case "height": t.css(l, "100%"); break } }); if (i.container.css("position") == "static") { i.container.css("position", "relative") } t.css({ top: "auto", left: "auto", position: "relative" }); i.items.css({ margin: 0, width: t.css("width"), height: t.css("height"), position: "absolute", top: 0, left: 0, zIndex: 0, opacity: 0, overflow: "hidden" }); i.items.each(function (t) { e(this).attr("id", i.prefix + "item" + t) }); if (r.showBullets !== "never") { i.container.addClass(i.prefix + "show-bullets"); var c = '<ol class="' + i.prefix + 'bullets">'; i.items.each(function (t) { var n = e(this); var r = i.prefix + "item" + t; c = c + '<li><a id="' + r + '-bullet" class="' + i.prefix + 'bullet">' + parseInt(t + 1, 10) + "</a></li>" }); c = c + "</ol>"; i.container.append(c); i.navigation = i.container.find("." + i.prefix + "bullets"); i.buttons.bullets = i.navigation.find("." + i.prefix + "bullet"); i.buttons.bullets.first().addClass(i.prefix + "active-bullet " + i.prefix + "first-bullet"); i.buttons.bullets.last().addClass(i.prefix + "last-bullet"); i.buttons.bullets.click(function () { var n = e(this).attr("id").replace("-bullet", ""); var s = i.container.find("#" + n); var o = parseInt(i.navigation.find("." + i.prefix + "active-bullet").attr("id").replace("-bullet", "").replace(i.prefix + "item", ""), 10); var u = parseInt(n.replace(i.prefix + "item", ""), 10); if (o < u) { m(t, r, s) } else if (o > u) { v(t, r, s) } else { return false } if (r.autoPlay) { } }) } if (r.showBullets === "hover") { i.navigation.hide(); i.container.mouseenter(function () { i.navigation.stop(true, true).fadeIn(r.controlFadeTime) }).mouseleave(function () { i.navigation.delay(200).fadeOut(r.controlFadeTime) }) } if (r.showCaptions !== "never") { i.container.addClass(i.prefix + "show-captions"); i.items.each(function () { var t = e(this); if (t.children("." + i.prefix + "caption").length == 0) { if (t.children("img").length > 0) { var r = e.trim(t.children("img:first").attr("title")); if (n != r || "" == r) { t.append('<div class="' + i.prefix + 'caption">' + r + "</div>"); t.children("." + i.prefix + "caption:empty").remove() } } } }); if (r.showCaptions === "hover") { e("." + i.prefix + "caption").hide(); i.container.mouseenter(function () { i.active.find("." + i.prefix + "caption").stop(true, true).fadeTo(r.captionFadeTime, r.captionsOpacity) }).mouseleave(function () { i.active.find("." + i.prefix + "caption").delay(200).fadeOut(r.captionFadeTime) }) } else if (r.showCaptions === "always") { e("." + i.prefix + "caption").fadeTo(0, r.captionsOpacity) } } i.items.each(function () { e(this).children("img").removeAttr("title") }); if (r.autoPlay) { i.intervalAutoPlay = setInterval(function () { m(t, r) }, r.showTime) } else { i.intervalAutoPlay = false } if (r.pauseOnHover) { i.container.addClass(i.prefix + "pause-on-hover"); t.mouseenter(function () { if (i.isPlaying) { clearInterval(i.intervalAutoPlay); if (r.controlsPlayPause) { i.buttons.play.text(r.playText).removeClass(i.prefix + "pause").addClass(i.prefix + "play") } } }).mouseleave(function () { if (i.isPlaying) { i.intervalAutoPlay = setInterval(function () { m(t, r) }, r.showTime); if (r.controlsPlayPause) { i.buttons.play.text(r.pauseText).removeClass(i.prefix + "play").addClass(i.prefix + "pause") } } }) } if (r.controlsKeyboard) { i.container.addClass(i.prefix + "controls-keyboard"); e(document).keyup(function (e) { switch (e.keyCode) { case 37: v(t, r); break; case 39: m(t, r); break; case 80: if (i.isPlaying === false) { d() } else { p() } break } }) } if (r.controlsMousewheel) { i.container.addClass(i.prefix + "controls-mousewheel"); if (!e.isFunction(e.fn.mousewheel)) { alert("$.fn.mousewheel is not a function. Please check that you have the mousewheel-plugin installed properly.") } else { t.mousewheel(function (e, n) { e.preventDefault(); if (i.container.hasClass("inProgress")) { return false } var s = n > 0 ? "up" : "down"; if (s === "up") { v(t, r) } else { m(t, r) } }) } } i.active = t.find("." + i.prefix + "active"); i.active.css({ zIndex: 1, opacity: 1 }); if (!r.cycled) { i.items.each(function () { var t = e(this); if (t.is(":first-child")) { t.addClass(i.prefix + "firstItem") } if (t.is(":last-child")) { t.addClass(i.prefix + "lastItem") } }); if (i.active.is(":first-child") && r.controlsPrevNext) { i.buttons.prev.addClass("disabled") } if (i.active.is(":last-child")) { if (r.controlsPrevNext) { i.buttons.next.addClass("disabled"); p() } if (r.autoPlay) { i.buttons.play.addClass("disabled") } } } if (u[r.effect] == n) { console.log("Effect for " + r.effect + " not found.") } else { u[r.effect](t, r, i) } t.data("slider:vars", i); r.callBackInit() }, c = function (e) { return e.is(":first-child") }, h = function (e) { return e.is(":last-child") }, p = function () { var e = s.data("slider:vars"); clearInterval(e.intervalAutoPlay); e.isPlaying = false; if (i.controlsPlayPause) { e.buttons.play.text(i.playText).removeClass(e.prefix + "pause").addClass(e.prefix + "play") } i.callBackPause() }, d = function () { var e = s.data("slider:vars"); e.intervalAutoPlay = setInterval(function () { m(s, i) }, i.showTime); e.isPlaying = true; if (i.controlsPlayPause) { e.buttons.play.text(i.pauseText).removeClass(e.prefix + "play").addClass(e.prefix + "pause") } i.callBackPlay() }, v = function (t, r, i) { var s = t.data("slider:vars"); if (!r.cycled && c(s.active)) { return false } r.callBeforePrev(); if (s.container.hasClass("inProgress")) { return false } s.container.addClass("inProgress"); if (!i) { if (r.randomOrder) { var u = g(s); s.next = s.container.find("#" + u) } else { s.next = s.items.first().hasClass(s.prefix + "active") ? s.items.last() : s.active.prev() } } else { s.next = i } if (s.next.hasClass(s.prefix + "active")) { return false } if (r.showCaptions !== "never") { e("." + s.prefix + "caption").stop(true, true).fadeOut(r.captionsFadeTime) } if (r.showBullets !== "never" && r.changeBullets == "before") { s.navigation.find("." + s.prefix + "active-bullet").removeClass(s.prefix + "active-bullet"); s.navigation.find("#" + s.next.attr("id") + "-bullet").addClass(s.prefix + "active-bullet") } setTimeout(function () { var e = []; e.settings = r; e.animateActive = r.animateActive; e.direction = r.slidePrevDirection; if (o[r.effect] == n) { console.log("Preparations for " + r.effect + " not found.") } else { o[r.effect](t, e, y) } setTimeout(function () { if (r.showBullets !== "never" && r.changeBullets == "after") { s.navigation.find("." + s.prefix + "active-bullet").removeClass(s.prefix + "active-bullet"); s.navigation.find("#" + s.next.attr("id") + "-bullet").addClass(s.prefix + "active-bullet") } r.callBackPrev() }, r.effectTime) }, r.captionsFadeTime); if (r.showBullets !== "never" && r.changeBullets == "after") { s.navigation.find("." + s.prefix + "active-bullet").removeClass(s.prefix + "active-bullet"); s.navigation.find("#" + s.next.attr("id") + "-bullet").addClass(s.prefix + "active-bullet") } }, m = function (t, r, i) { var s = t.data("slider:vars"); if (!r.cycled && h(s.active)) { return false } r.callBeforeNext(); if (s.container.hasClass("inProgress")) { return false } s.container.addClass("inProgress"); if (!i) { if (r.randomOrder) { var u = g(s); s.next = s.container.find("#" + u) } else { s.next = s.items.last().hasClass(s.prefix + "active") ? s.items.first() : s.active.next() } } else { s.next = i } if (s.next.hasClass(s.prefix + "active")) { return false } if (r.showCaptions !== "never") { e("." + s.prefix + "caption").stop(true, true).fadeOut(r.captionsFadeTime) } if (r.showBullets !== "never" && r.changeBullets == "before") { s.navigation.find("." + s.prefix + "active-bullet").removeClass(s.prefix + "active-bullet"); s.navigation.find("#" + s.next.attr("id") + "-bullet").addClass(s.prefix + "active-bullet") } setTimeout(function () { var e = []; e.settings = r; e.animateActive = r.animateActive; e.direction = r.slideNextDirection; if (o[r.effect] == n) { console.log("Preparations for " + r.effect + " not found.") } else { o[r.effect](t, e, y) } setTimeout(function () { if (r.showBullets !== "never" && r.changeBullets == "after") { s.navigation.find("." + s.prefix + "active-bullet").removeClass(s.prefix + "active-bullet"); s.navigation.find("#" + s.next.attr("id") + "-bullet").addClass(s.prefix + "active-bullet") } r.callBackNext() }, r.effectTime) }, r.captionsFadeTime) }, g = function (e) { var t = e.active.attr("id"); var n = e.items.length; var r = e.prefix + "item" + parseInt(Math.random() * n, 10); var i = r.replace(e.prefix + "item", ""); if (e.playedCounter >= n) { e.playedCounter = 0; e.playedArray = [] } if (t == r || e.playedArray[i] === true) { return g(e) } else { e.playedArray[i] = true; e.playedCounter++; return r } }, y = function (e, t) { var n = e.data("slider:vars"); n.next.addClass(n.prefix + "active").css({ zIndex: 1, top: 0, left: 0, width: "100%", height: "100%", margin: 0, opacity: 1 }); n.active.css({ zIndex: 0, top: 0, left: 0, margin: 0, opacity: 0 }).removeClass(n.prefix + "active"); t.additionalResets(); if (!t.cycled) { if (t.controlsPrevNext) { if (c(n.next)) { n.buttons.prev.addClass("disabled") } else { n.buttons.prev.removeClass("disabled") } if (h(n.next)) { n.buttons.next.addClass("disabled"); p() } else { n.buttons.next.removeClass("disabled") } } if (t.controlsPlayPause) { if (h(n.next)) { n.buttons.play.addClass("disabled"); p() } else { n.buttons.play.removeClass("disabled") } } } if (t.showBullets !== "never") { n.navigation.find("." + n.prefix + "active-bullet").removeClass(n.prefix + "active-bullet"); n.navigation.find("#" + n.next.attr("id") + "-bullet").addClass(n.prefix + "active-bullet") } n.active = n.next; if (t.showCaptions !== "never") { n.active.find("." + n.prefix + "caption").stop(true, true).fadeTo(t.captionsFadeTime, t.captionsOpacity) } n.container.removeClass("inProgress") }; this.pause = function () { p() }; this.play = function () { d() }; this.prev = function (e) { v(s, i, e) }; this.next = function (e) { m(s, i, e) }; this.uninit = function () { p(); a.container.before(e(t).data("slider:original")); s.data("slider:vars", null); a.container.remove(); e(t).data("rhinoslider", null) }; l(s, i, a) }; e.fn.rhinoslider = function (t) { return this.each(function () { var n = e(this); if (n.data("rhinoslider")) { return n.data("rhinoslider") } n.data("slider:original", n.clone()); var i = new r(this, t); n.data("rhinoslider", i) }) }; e.fn.rhinoslider.defaults = { effect: "slide", easing: "swing", randomOrder: false, controlsMousewheel: true, controlsKeyboard: true, controlsPrevNext: true, controlsPlayPause: true, pauseOnHover: true, animateActive: true, autoPlay: false, cycled: true, showTime: 3e3, effectTime: 1e3, controlFadeTime: 650, captionsFadeTime: 250, captionsOpacity: .7, partDelay: 100, shiftValue: "150", parts: "5,3", showCaptions: "never", showBullets: "hover", changeBullets: "after", showControls: "hover", slidePrevDirection: "toLeft", slideNextDirection: "toRight", prevText: "prev", nextText: "next", playText: "play", pauseText: "pause", styles: "position,top,right,bottom,left,margin-top,margin-right,margin-bottom,margin-left,width,height", callBeforeInit: function () { return false }, callBackInit: function () { return false }, callBeforeNext: function () { return false }, callBeforePrev: function () { return false }, callBackNext: function () { return false }, callBackPrev: function () { return false }, callBackPlay: function () { return false }, callBackPause: function () { return false }, additionalResets: function () { return false } }; e.fn.rhinoslider.effects = { fade: function (e, t, n) { var r = e.data("slider:vars"); var i = t.settings; if (i.animateActive) { r.active.animate({ opacity: 0 }, i.effectTime) } r.next.css({ zIndex: 2 }).animate({ opacity: 1 }, i.effectTime, i.easing, function () { n(e, i) }) }, slide: function (e, t, n) { var r = e.data("slider:vars"); var i = t.settings; var s = t.direction; var o = []; o.width = r.container.width(); o.height = r.container.height(); o.easing = i.showTime === 0 ? "linear" : i.easing; o.nextEasing = i.showTime === 0 ? "linear" : i.easing; e.css("overflow", "hidden"); switch (s) { case "toTop": o.top = -o.height; o.left = 0; o.nextTop = -o.top; o.nextLeft = 0; break; case "toBottom": o.top = o.height; o.left = 0; o.nextTop = -o.top; o.nextLeft = 0; break; case "toRight": o.top = 0; o.left = o.width; o.nextTop = 0; o.nextLeft = -o.left; break; case "toLeft": o.top = 0; o.left = -o.width; o.nextTop = 0; o.nextLeft = -o.left; break } r.next.css({ zIndex: 2, opacity: 1 }); if (i.animateActive) { r.active.css({ top: 0, left: 0 }).animate({ top: o.top, left: o.left, opacity: 1 }, i.effectTime, o.easing) } r.next.css({ top: o.nextTop, left: o.nextLeft }).animate({ top: 0, left: 0, opacity: 1 }, i.effectTime, o.nextEasing, function () { n(e, i) }) }, shuffle: function (t, n, r) { var s = t.data("slider:vars"), o = n.settings, u = [], a = function (t, n, r) { var s = t.data("slider:vars"); r.html('<div class="' + s.prefix + 'partContainer">' + r.html() + "</div>"); var o = r.html(); var u = t.width(); var a = t.height(); for (i = 1; i < n.parts.x * n.parts.y; i++) { r.html(r.html() + o) } var f = r.children("." + s.prefix + "partContainer"); var l = []; l.width = r.width() / n.parts.x; l.height = r.height() / n.parts.y; f.each(function (t) { var i = e(this); l.top = (t - t % n.parts.x) / n.parts.x * l.height; l.left = t % n.parts.x * l.width; l.marginTop = -l.top; l.marginLeft = -l.left; i.css({ top: l.top, left: l.left, width: l.width, height: l.height, position: "absolute", overflow: "hidden" }).html('<div class="' + s.prefix + 'part">' + i.html() + "</div>"); i.children("." + s.prefix + "part").css({ marginTop: l.marginTop, marginLeft: l.marginLeft, width: u, height: a, background: r.css("background-image") + " " + r.parent().css("background-color") }) }); return f }, f = function (e, t) { if (e.x * e.y > 36) { if (t) { if (e.x > 1) { e.x-- } else { e.y-- } t = false } else { if (e.y > 1) { e.y-- } else { e.x-- } t = true } return f(e, t) } return e }, l = function (t, n) { n.parts.x = n.parts.x < 1 ? 1 : n.parts.x; n.parts.y = n.parts.y < 1 ? 1 : n.parts.y; n.parts = f(n.parts, true); n.shiftValue.x = n.shiftValue.x < 0 ? n.shiftValue.x * -1 : n.shiftValue.x; n.shiftValue.y = n.shiftValue.y < 0 ? n.shiftValue.y * -1 : n.shiftValue.y; var i = t.data("slider:vars"); var s = i.active.html(); var o = i.next.html(); var u = t.width(); var l = t.height(); var c = a(t, n, i.active); var h = a(t, n, i.next); var p = i.active.css("background-image"); var d = i.active.css("background-color"); var v = i.next.css("background-image"); var m = i.next.css("background-color"); i.active.css({ backgroundImage: "none", backgroundColor: "none", opacity: 1 }); i.next.css({ backgroundImage: "none", backgroundColor: "none", opacity: 1, zIndex: 2 }); var g = []; g.width = i.next.width() / n.parts.x; g.height = i.next.height() / n.parts.y; if (n.animateActive) { c.each(function (t) { $this = e(this); var r, i; r = Math.random() * n.shiftValue.x * 2 - n.shiftValue.x; i = Math.random() * n.shiftValue.y * 2 - n.shiftValue.y; $this.animate({ opacity: 0, top: "+=" + i, left: "+=" + r }, n.effectTime, n.easing) }) } h.each(function (u) { $this = e(this); g.top = (u - u % n.parts.x) / n.parts.x * g.height; g.left = u % n.parts.x * g.width; var a, f; a = g.left + (Math.random() * n.shiftValue.x * 2 - n.shiftValue.x); f = g.top + (Math.random() * n.shiftValue.y * 2 - n.shiftValue.y); $this.css({ top: f, left: a, opacity: 0 }).animate({ top: g.top, left: g.left, opacity: 1 }, n.effectTime, n.easing, function () { if (u == c.length - 1) { i.active.html(s); i.next.html(o); i.active.css({ backgroundImage: p, backgroundColor: d, opacity: 0 }); i.next.css({ backgroundImage: v, backgroundColor: m, opacity: 1 }); r(t, n) } }) }) }; l(t, o) } }; e.fn.rhinoslider.preparations = { fade: function (e, t, n) { }, slide: function (e, t, n) { n.items.css("overflow", "hidden"); e.css("overflow", "hidden") }, shuffle: function (e, t, n) { var r = String(tmpShiftValue); if (r.indexOf(",") >= 0) { var i = r.split(","); t.shiftValue.x = i[0]; t.shiftValue.y = i[1] } else { t.shiftValue.x = parseInt(tmpShiftValue, 10); t.shiftValue.y = parseInt(tmpShiftValue, 10) } var s = String(tmpParts); if (s.indexOf(",") >= 0) { var i = s.split(","); t.parts.x = i[0]; t.parts.y = i[1] } else { t.parts.x = parseInt(tmpParts, 10); t.parts.y = parseInt(tmpParts, 10) } n.items.css("overflow", "visible") } } })(jQuery, window)